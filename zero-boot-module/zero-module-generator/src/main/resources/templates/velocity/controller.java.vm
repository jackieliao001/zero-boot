###set ($ClassName=${entity.replace('Entity','')})
###set ($className=${ClassName.substring(0, 1).toLowerCase()}+${ClassName.substring(1)})
#set ($ModuleName=${package.ModuleName})
package ${package.Controller};

import ${package.Service}.${table.serviceName};
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import ${projectPath}.framework.common.bean.PageResult;
import ${projectPath}.framework.common.bean.Result;
import jakarta.validation.Valid;
import lombok.AllArgsConstructor;

#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
import java.util.List;

/**
 * $!{table.comment}  接口控制器
 *
 * @author ${author}
 * @date ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("${moduleAlias}/${functionName}")
@Tag(name="${table.comment}")
@AllArgsConstructor
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass}<${entity}, ${table.serviceName}> {
#else
public class ${table.controllerName} {
#end
    private final ${table.serviceName} ${className}Service;

    @GetMapping("page")
    @Operation(summary = "分页")
    @PreAuthorize("hasAuthority('${moduleAlias}:${functionName}:page')")
    public Result<PageResult<${ClassName}VO>> page(@Valid ${ClassName}Query query){
        PageResult<${ClassName}VO> page = ${className}Service.page(query);

        return Result.ok(page);
    }

    @GetMapping("{id}")
    @Operation(summary = "信息")
    @PreAuthorize("hasAuthority('${moduleAlias}:${functionName}:info')")
    public Result<${ClassName}VO> get(@PathVariable("id") Long id){
        ${ClassName}Entity entity = ${className}Service.getById(id);

        return Result.ok(${ClassName}Convert.INSTANCE.convert(entity));
    }

    @PostMapping
    @Operation(summary = "保存")
    @PreAuthorize("hasAuthority('${moduleAlias}:${functionName}:save')")
    public Result<String> save(@RequestBody ${ClassName}VO vo){
        ${className}Service.save(vo);

        return Result.ok();
    }

    @PutMapping
    @Operation(summary = "修改")
    @PreAuthorize("hasAuthority('${moduleAlias}:${functionName}:update')")
    public Result<String> update(@RequestBody @Valid ${ClassName}VO vo){
        ${className}Service.update(vo);

        return Result.ok();
    }

    @DeleteMapping
    @Operation(summary = "删除")
    @PreAuthorize("hasAuthority('${moduleAlias}:${functionName}:delete')")
    public Result<String> delete(@RequestBody List<Long> idList){
        ${className}Service.delete(idList);

        return Result.ok();
    }
}